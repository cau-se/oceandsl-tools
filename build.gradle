/*
* This file was generated by the Gradle 'init' task.
*
* This is a general purpose Gradle build.
* Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
*/

plugins {
	id 'java'
	id "com.diffplug.spotless" version "5.17.1"
	id 'checkstyle'
	id 'pmd'
}

repositories {
	mavenLocal()
//	jcenter()
	mavenCentral()
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'com.diffplug.spotless'

	repositories {
//		jcenter()
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	}

	dependencies {
		implementation 'net.kieker-monitoring:kieker:2.0.0-SNAPSHOT'
		implementation 'net.sourceforge.teetime:teetime:3.1-SNAPSHOT'
		implementation 'com.beust:jcommander:1.78'
		implementation 'ch.qos.logback:logback-classic:1.1.7'
		implementation 'org.slf4j:slf4j-api:1.7.30'
		implementation 'org.codehaus.groovy:groovy-all:3.0.2'

		// Use JUnit test framework
		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	}

	apply plugin: 'pmd'
	pmd {    // is represented by the groovy class "PmdExtension"
		// the used PMD version should be the same version as the PMD Eclipse plugin (https://marketplace.eclipse.org/content/eclipse-pmd) uses
		toolVersion = pmdVersion
		ignoreFailures = true
		consoleOutput = true

		// Clear the rule set first. Otherwise we would have a lot of additional rules in our rule set.
		ruleSets = []
		ruleSetFiles = files(rootProject.file("qa-configurations/pmdrules.xml"))
	}

	tasks.withType(Pmd) {
		reports {
			xml.required = true
			html.required = true
		}
	}


	apply plugin: 'checkstyle'
	checkstyle {
		toolVersion = checkstyleVersion
		ignoreFailures = true
		showViolations = false

		configFile = rootProject.file("qa-configurations/checkstyle-rules.xml")
		configDirectory = rootProject.file("qa-configurations")
	}

	tasks.withType(Checkstyle) {
		reports {
			xml.required = true
			html.required = true
			// html.stylesheet resources.text.fromFile(rootProject.projectDir.path + '/config/checkstyle-noframes-severity-sorted.xsl')
		}
	}

	spotless {
		format 'misc', {
			// define the files to apply `misc` to
			target '*.gradle', '*.md', '.gitignore'

			// define the steps to apply to those files
			trimTrailingWhitespace()
			indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
			endWithNewline()
		}
	}
}
